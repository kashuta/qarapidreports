name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop

jobs:
  build-push:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.6.0

      - name: Log in to Docker Hub
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          dockerfile: ./backend/Dockerfile
          push: true
          tags: kashuta/backend:${{ github.ref == 'refs/heads/main' && 'latest' || 'dev' }}

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          dockerfile: ./frontend/Dockerfile
          push: true
          tags: kashuta/frontend:${{ github.ref == 'refs/heads/main' && 'latest' || 'dev' }}

  deploy-develop:
    runs-on: ubuntu-latest
    needs: build-push
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install SSH Client and sshpass
        run: sudo apt-get install -y ssh-client sshpass

      - name: Set up SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > id_rsa_no_passphrase
          chmod 600 id_rsa_no_passphrase

      - name: Add remote server to known_hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DROPLET_HOST }} $(ssh-keyscan -H ${{ secrets.DROPLET_HOST }})" >> ~/.ssh/known_hosts

      - name: Copy files to remote server
        run: |
          export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          export POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          export POSTGRES_DIALECT=${{ secrets.POSTGRES_DIALECT }}
          envsubst < docker-compose.dev.yml > docker-compose.dev.subst.yml
          scp -o StrictHostKeyChecking=no -i id_rsa_no_passphrase -r -P ${{ secrets.SSH_PORT }} docker-compose.dev.subst.yml ${{ secrets.SSH_USER }}@${{ secrets.DROPLET_HOST }}:/var/www/qarapidreports/dev/docker-compose.dev.yml
      - name: Deploy to remote server
        run: |
          ssh -o StrictHostKeyChecking=no -i id_rsa_no_passphrase -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.DROPLET_HOST }} "cd /var/www/qarapidreports/dev && docker-compose -f docker-compose.dev.yml pull && docker-compose -f docker-compose.dev.yml down && docker-compose -f docker-compose.dev.yml up -d"

  deploy:
    runs-on: ubuntu-latest
    needs: build-push
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install SSH Client and sshpass
        run: sudo apt-get install -y ssh-client sshpass

      - name: Set up SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > id_rsa_no_passphrase
          chmod 600 id_rsa_no_passphrase

      - name: Add remote server to known_hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DROPLET_HOST }} $(ssh-keyscan -H ${{ secrets.DROPLET_HOST }})" >> ~/.ssh/known_hosts

      - name: Copy files to remote server
        run: |
          envsubst < docker-compose.prod.yml > docker-compose.prod.subst.yml
          scp -o StrictHostKeyChecking=no -i id_rsa_no_passphrase -r -P ${{ secrets.SSH_PORT }} docker-compose.prod.subst.yml ${{ secrets.SSH_USER }}@${{ secrets.DROPLET_HOST }}:/var/www/qarapidreports/prod/docker-compose.prod.yml

      - name: Deploy to remote server
        run: |
          ssh -o StrictHostKeyChecking=no -i id_rsa_no_passphrase -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.DROPLET_HOST }} "cd /var/www/qarapidreports/prod && docker-compose -f docker-compose.prod.yml pull && docker-compose -f docker-compose.prod.yml down && docker-compose -f docker-compose.prod.yml up -d"
